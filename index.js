const data = [
  {
    name: [
      `<ul>
          <li>Создан репозиторий goit-js-hw-06</li>
          <li>При сдаче домашней работы есть две ссылки: на исходные файлы и рабочую страницу на GitHub Pages.</li>
        <li>Посчитает и выведет в консоль количество категорий в ul#categories, то есть элементов li.item.</li>
        <li>Для каждого элемента li.item в списке ul#categories, найдет и выведет в консоль текст заголовка элемента (тега h2) и количество элементов в категории (всех вложенных в него li).</li>
        <li>Для выполнения этой задачи нужно использовать метод forEach() и свойства навигации по DOM.</li>
          <li>Код отформатирован Prettier</li>
          <li><a href="./task-01.html">Перейти на страницу выполнения задания</a></li>
        </ul>`
    ],
  },
  {
    name: [
      `<ul>
          <li>Создан репозиторий goit-js-hw-06</li>
          <li>При сдаче домашней работы есть две ссылки: на исходные файлы и рабочую страницу на GitHub Pages.</li>
          <li>Создаст отдельный элемент li. Обзательно используй метод document.createElement().</li>
          <li>Добавит название ингредиента как его текстовое содержимое.</li>
          <li>Добавит элементу класс item.</li>
          <li>После чего вставит все li за одну операцию в список ul#ingredients.</li>
          <li>Код отформатирован Prettier</li>
          <li><a href="./task-02.html">Перейти на страницу выполнения задания</a></li>
        </ul>`
    ],
  },
  {
    name: [
      `<ul>
          <li>Создан репозиторий goit-js-hw-06</li>
          <li>При сдаче домашней работы есть две ссылки: на исходные файлы и рабочую страницу на GitHub Pages.</li>
          <li>Cоздай переменную counterValue в которой будет храниться текущее значение счетчика и инициализируй её значением 0.</li>
          <li>Добавь слушатели кликов на кнопки, внутри которых увеличивай или уменьшай значение счтетчика.</li>
          <li>Обновляй интерфейс новым значением переменной counterValue.</li>
          <li>Код отформатирован Prettier</li>
          <li><a href="./task-03.html">Перейти на страницу выполнения задания</a></li>
        </ul>`
    ],
  },
  {
    name: [
      `<ul>
          <li>Создан репозиторий goit-js-hw-06</li>
          <li>При сдаче домашней работы есть две ссылки: на исходные файлы и рабочую страницу на GitHub Pages.</li>
          <li>Счетчик состоит из спана и кнопок, которые, при клике, должны увеличивать и уменьшать его значение на единицу.</li>
          <li>Создай переменную counterValue в которой будет храниться текущее значение счетчика и инициализируй её значением 0.</li>
          <li>Добавь слушатели кликов на кнопки, внутри которых увеличивай или уменьшай значение счтетчика.</li>
          <li>Обновляй интерфейс новым значением переменной counterValue.</li>
          <li>Код отформатирован Prettier</li>
          <li><a href="./task-04.html">Перейти на страницу выполнения задания</a></li>
        </ul>`
    ],
  },
  {
    name: [
      `<ul>
          <li>Создан репозиторий goit-js-hw-06</li>
          <li>При сдаче домашней работы есть две ссылки: на исходные файлы и рабочую страницу на GitHub Pages.</li>
          <li>Напиши скрипт который, при наборе текста в инпуте input#name-input</li>
          <li>Cобытие input, подставляет его текущее значение в span#name-output</li>
          <li>Если инпут пустой, в спане должна отображаться строка "Anonymous".</li>
          <li>Код отформатирован Prettier</li>
          <li><a href="./task-05.html">Перейти на страницу выполнения задания</a></li>
        </ul>`
    ],
  },
  {
    name: [
      `<ul>
          <li>Создан репозиторий goit-js-hw-06</li>
          <li>При сдаче домашней работы есть две ссылки: на исходные файлы и рабочую страницу на GitHub Pages.</li>
          <li>Напиши скрипт, который при потере фокуса на инпуте</li>
          <li>(событие blur), проверяет его содержимое на правильное количество введённых символов.</li>
          <li>Сколько символов должно быть в инпуте, указывается в его атрибуте data-length.</li>
          <li>Если введено подходящее количество символов, то border инпута становится зелёным, если неправильное - красным.</li>
          <li>Код отформатирован Prettier</li>
          <li><a href="./task-06.html">Перейти на страницу выполнения задания</a></li>
        </ul>`
    ],
  },
  {
    name: [
      `<ul>
          <li>Создан репозиторий goit-js-hw-06</li>
          <li>При сдаче домашней работы есть две ссылки: на исходные файлы и рабочую страницу на GitHub Pages.</li>
          <li>Напиши скрипт, который реагирует на изменение значения input#font-size-control</li>
          <li>Cобытие input и изменяет инлайн-стиль span#text обновляя свойство font-size</li>
          <li>В результате при перетаскивании ползунка будет меняться размер текста.</li>
          <li>Код отформатирован Prettier</li>
          <li><a href="./task-07.html">Перейти на страницу выполнения задания</a></li>
        </ul>`
    ],
  },
  {
    name: [
      `<ul>
          <li>Создан репозиторий goit-js-hw-06</li>
          <li>При сдаче домашней работы есть две ссылки: на исходные файлы и рабочую страницу на GitHub Pages.</li>
          <li>Обработка отправки формы form.login-form должна быть по событию submit.</li>
          <li>При отправке формы страница не должна перезагружаться.</li>
          <li>Если в форме есть незаполненные поля, выводи alert с предупреждением о том, что все поля должны быть заполнены.</li>
          <li>Выведи обьект с введенными данными в консоль и очисти значения полей формы методом reset.</li>
          <li>Если пользователь заполнил все поля и отправил форму, собери значения полей в обьект, где имя поля будет именем свойства, а значение поля - значением свойства. Для доступа к элементам формы используй свойство elements.</li>
          <li>Код отформатирован Prettier</li>
          <li><a href="./task-08.html">Перейти на страницу выполнения задания</a></li>
        </ul>`
    ],
  },
  {
    name: [
      `<ul>
          <li>Создан репозиторий goit-js-hw-06</li>
          <li>При сдаче домашней работы есть две ссылки: на исходные файлы и рабочую страницу на GitHub Pages.</li>
          <li>Напиши скрипт, который изменяет цвета фона элемента body через инлайн стиль при клике на button.change-color и выводит значение цвета в span.color.</li>
          <li>Для генерации случайного цвета используй функцию getRandomHexColor.</li>
          <li>Код отформатирован Prettier</li>
          <li><a href="./task-09.html">Перейти на страницу выполнения задания</a></li>
        </ul>`
    ],
  },
  {
    name: [
      `<ul>
          <li>Создан репозиторий goit-js-hw-06</li>
          <li>При сдаче домашней работы есть две ссылки: на исходные файлы и рабочую страницу на GitHub Pages.</li>
          <li>Напиши скрипт создания и очистки коллекции элементов. </li>
          <li>Пользователь вводит количество элементов в input и нажимает кнопку Создать, после чего рендерится коллекция. </li>
          <li>При нажатии на кнопку Очистить, коллекция элементов очищается.</li>
          <li>Создай функцию createBoxes(amount), которая принимает один параметр - число. </li>
           <li>Функция создает столько div, сколько указано в amount и добавляет их в div#boxes.</li>
            <li>Размеры самого первого div - 30px на 30px.</li>
             <li>Каждый элемент после первого, должен быть шире и выше предыдущего на 10px.</li>
             <li>Все элементы должены иметь случайный цвет фона в формате HEX. Используй готовую функцию getRandomHexColor для получения цвета.</li>
             <li>Создай функцию destroyBoxes(), которая очищает содержимое div#boxes, тем самым удаляя все созданные элементы.</li>
          <li>Код отформатирован Prettier</li>
          <li><a href="./task-10.html">Перейти на страницу выполнения задания</a></li>
        </ul>`
    ],
  }
];
const buttons = document.querySelectorAll('.btn-resources');
const tabContent = document.querySelector('#tab-content');
buttons.forEach(el => el.addEventListener('click', handleClickTab));

function handleClickTab(e) {
  buttons.forEach((el, index) => {
        el.classList.remove('active');
      },
  );
  e.target.classList.add('active');
  tabContent.innerHTML = data[e.target.dataset.number].name
}
